from flask import Flask, request, jsonify
import os
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import load_model
import io
from PIL import Image
from ultralytics import YOLO

# ==========================
#  1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
# ==========================
app = Flask(__name__)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
YOLO_MODEL_PATH = "yolov8m.pt"
PREDICTION_MODEL_PATH = "saved_model/newsimple_model.h5"
CLASS_NAMES = ["d1", "d2", "d3"]

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
yolo_model = YOLO(YOLO_MODEL_PATH)
prediction_model = load_model(PREDICTION_MODEL_PATH)
IMG_SIZE = (224, 224)


# ==========================
#  2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡πâ‡∏≤‡∏á (‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô)
# ==========================
def detect_and_crop_image(image_data):
    """
    ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û (bytes) ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ YOLO ‚Üí ‡∏ï‡∏±‡∏î‡∏ä‡πâ‡∏≤‡∏á ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô 224x224
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ), ‡∏´‡∏£‡∏∑‡∏≠ dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ "action"
    """
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
        img = Image.open(io.BytesIO(image_data))

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PNG ‡∏ó‡∏µ‡πà‡∏°‡∏µ transparency
        if img.mode in ("RGBA", "LA", "P"):
            img = img.convert("RGB")

        img_array = np.array(img)

        # ‡πÉ‡∏ä‡πâ YOLO ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        results = yolo_model(img)

        if len(results) == 0:
            return None, {"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏†‡∏≤‡∏û", "action": "skip"}

        # ‡∏î‡∏∂‡∏á bounding box ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        boxes = results[0].boxes.xyxy.cpu().numpy()
        confs = results[0].boxes.conf.cpu().numpy()
        labels = results[0].boxes.cls.cpu().numpy()
        class_names = results[0].names

        best_idx = np.argmax(confs)
        x1, y1, x2, y2 = boxes[best_idx]
        label_idx = int(labels[best_idx])
        label_name = class_names[label_idx]

        if label_name != "elephant":
            return None, {"error": f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏: {label_name} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡πâ‡∏≤‡∏á", "action": "skip"}

        if x1 < 0 or y1 < 0 or x2 > img.size[0] or y2 > img.size[1]:
            return None, {"error": "bounding box ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏†‡∏≤‡∏û", "action": "skip"}

        # ‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û
        cropped_img = img.crop((x1, y1, x2, y2))
        cropped_img = cropped_img.resize(IMG_SIZE)

        # üîç ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)
        if cropped_img.mode in ("RGBA", "LA", "P"):
            cropped_img = cropped_img.convert("RGB")

        cropped_array = img_to_array(cropped_img)
        cropped_array = np.expand_dims(cropped_array, axis=0)
        cropped_array = cropped_array / 255.0

        return cropped_array, {
            "detected": True,
            "class": "elephant",
            "confidence": float(confs[best_idx]),
            "bbox": {"x1": int(x1), "y1": int(y1), "x2": int(x2), "y2": int(y2)},
            "action": "detected",
        }

    except Exception as e:
        return None, {"error": str(e), "action": "error"}


# ==========================
#  3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û (‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô)
# ==========================
def predict_image_from_crop(cropped_array):
    """
    ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™
    ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô" ‡πÅ‡∏•‡∏∞ "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"
    """
    try:
        predictions = prediction_model.predict(cropped_array)[0]
        predicted_class = np.argmax(predictions)
        confidence = float(predictions[predicted_class])

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        if confidence < 0.999:
            uncertainty = "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"
        else:
            uncertainty = "‡πÅ‡∏ô‡πà‡πÉ‡∏à"

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result = {
            "class": CLASS_NAMES[predicted_class],
            "confidence": confidence,
            "probabilities": dict(zip(CLASS_NAMES, predictions.tolist())),
            "uncertainty": uncertainty,
        }

        return result

    except Exception as e:
        return {"error": str(e), "action": "predict_error"}


# ==========================
#  4. ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API
# ==========================
@app.route("/predict", methods=["POST"])
def predict():
    if "image" not in request.files:
        return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û"}), 400

    file = request.files["image"]
    if file.filename == "":
        return jsonify({"error": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û"}), 400

    image_data = file.read()

    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ YOLO
    cropped_array, detection_result = detect_and_crop_image(image_data)

    if detection_result is None:
        return jsonify(detection_result), 400

    if detection_result.get("action") == "skip":
        return jsonify(
            {"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏û", "message": "‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πâ‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ"}
        ), 400

    if detection_result.get("action") == "error":
        return jsonify(
            {"error": detection_result["error"], "message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û"}
        ), 400

    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 2: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    prediction_result = predict_image_from_crop(cropped_array)

    # ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    final_result = {"detection": detection_result, "prediction": prediction_result}

    return jsonify(final_result)


# ==========================
# üîπ 5. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô API
# ==========================
if __name__ == "__main__":
    print("üöÄ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó API ‡∏ó‡∏µ‡πà http://localhost:5000/predict")
    app.run(host="0.0.0.0", port=5800, debug=False)
